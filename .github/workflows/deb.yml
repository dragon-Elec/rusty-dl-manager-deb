name: Build .deb Package

on:
  push:
    branches:
      - main  # Adjust if your default branch is named differently (e.g., master)
  pull_request:
    branches:
      - main  # Adjust if your default branch is named differently

jobs:
  build_deb:
    runs-on: ubuntu-latest # Uses the latest Ubuntu Linux runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # You can specify a particular Rust version if needed, e.g., '1.70.0'

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        # This step caches dependencies to speed up subsequent builds

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install system build dependencies
        # These are development libraries needed to COMPILE your project.
        # Your Cargo.toml's [package.metadata.deb].depends lists RUNTIME dependencies.
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libdbus-1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libsfml-dev \
            pkg-config # Often useful for C libraries, good to have

      - name: Build .deb package
        # This command reads your Cargo.toml ([package.metadata.deb])
        # and compiles your project in release mode before packaging.
        run: cargo deb

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: rusty-dl-manager-deb # Name of the artifact to download from GitHub
          path: target/debian/*.deb   # Path to the .deb file(s) generated by cargo-deb
          if-no-files-found: error  # Fails the workflow if no .deb is found
